@page "/vehicles/details"
@using Microsoft.EntityFrameworkCore
@using CarRentalManagement.Components.Domain
@inject IDbContextFactory<CarRentalManagement.Data.CarRentalManagementContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Vehicle</h2>
    <hr />
    @if (vehicle is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Year</dt>
            <dd class="col-sm-10">@vehicle.Year</dd>
            <dt class="col-sm-2">LiscensePlateNumber</dt>
            <dd class="col-sm-10">@vehicle.LiscensePlateNumber</dd>
            <dt class="col-sm-2">MakeId</dt>
            <dd class="col-sm-10">@vehicle.MakeId</dd>
            <dt class="col-sm-2">ModelId</dt>
            <dd class="col-sm-10">@vehicle.ModelId</dd>
            <dt class="col-sm-2">ColourId</dt>
            <dd class="col-sm-10">@vehicle.ColourId</dd>
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@vehicle.DateCreated</dd>
            <dt class="col-sm-2">DateUpdated</dt>
            <dd class="col-sm-10">@vehicle.DateUpdated</dd>
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@vehicle.CreatedBy</dd>
            <dt class="col-sm-2">UpdatedBy</dt>
            <dd class="col-sm-10">@vehicle.UpdatedBy</dd>
        </dl>
        <div>
            <a href="@($"/vehicles/edit?id={vehicle.Id}")">Edit</a> |
            <a href="@($"/vehicles")">Back to List</a>
        </div>
    }
</div>

@code {
    private Vehicle? vehicle;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        vehicle = await context.Vehicle.FirstOrDefaultAsync(m => m.Id == Id);

        if (vehicle is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
